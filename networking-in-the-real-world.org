#+TITLE:     Networking in the Real World
#+AUTHOR:    Ben Deane
#+EMAIL:     bdeane@blizzard.com
#+DATE:      24th February 2014
#+DESCRIPTION:
#+KEYWORDS: networking real world
#+LANGUAGE:  en
#+OPTIONS:   H:2 num:t toc:nil \n:nil @:t ::t |:t ^:t -:t f:nil *:t <:t
#+OPTIONS:   TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+SELECT_TAGS: export
#+EXCLUDE_TAGS: noexport

#+LaTeX_CLASS: beamer
#+STARTUP: beamer
#+BEAMER_THEME: Madrid
#+LaTeX_HEADER: \usepackage{helvet}
# +COLUMNS: %40ITEM %10BEAMER_env(Env) %9BEAMER_envargs(Env Args) %4BEAMER_col(Col) %10BEAMER_extra(Extra)

# To generate notes pages only:
# +LaTeX_CLASS_OPTIONS: [handout]
# +LaTeX_HEADER: \setbeameroption{show only notes}
# +LaTeX_HEADER: \usepackage{pgfpages}
# +LaTeX_HEADER: \pgfpagesuselayout{2 on 1}[letterpaper,portrait,border shrink=5mm]

# For normal presentation output:
#+LaTeX_CLASS_OPTIONS: [presentation, bigger]

# +beamer: \beamerdefaultoverlayspecification{<+->}

* Introduction
** Who Am I?
:PROPERTIES:
:BEAMER_act: [<+->]
:END:
- Ben Deane
- Programmer at Blizzard on the Battle.net team
- Lifelong network game programmer

** Who Am I?
:PROPERTIES:
:BEAMER_act: [<+(-1)->]
:END:
*** A block                                                  :B_column:BMCOL:
:PROPERTIES:
:BEAMER_col: 0.4
:BEAMER_env: column
:END:
#+attr_latex: width=\textwidth
[[./Populous-the-beginning.png]]
*** A block                                                :B_column:BMCOL:
:PROPERTIES:
:BEAMER_col: 0.4
:BEAMER_env: column
:END:
#+attr_latex: width=\textwidth
[[./starcraft-2-box.jpg]]

** Who Am I?
:PROPERTIES:
:BEAMER_act: [<+(-1)->]
:END:
*** A block                                                  :B_column:BMCOL:
:PROPERTIES:
:BEAMER_col: 0.4
:BEAMER_env: column
:END:
#+attr_latex: width=\textwidth
[[./Warhammer40kfwbox.jpg]]
*** A block                                                :B_column:BMCOL:
:PROPERTIES:
:BEAMER_col: 0.4
:BEAMER_env: column
:END:
#+attr_latex: width=\textwidth
[[./Grabox.jpg]]

** Who Am I?
:PROPERTIES:
:BEAMER_act: [<+(-1)->]
:END:
*** A block                                                :B_column:BMCOL:
:PROPERTIES:
:BEAMER_col: 0.4
:BEAMER_env: column
:END:
#+attr_latex: width=\textwidth
[[./SimThemeParkWorld.jpg]]
*** B block                                                :B_column:BMCOL:
:PROPERTIES:
:BEAMER_col: 0.4
:BEAMER_env: column
:END:
#+attr_latex: width=\textwidth
[[./Diablo_III_cover.png]]

* Basics
** TCP vs UDP
TCP vs UDP?
latency issues?
asynchronous design
fault-tolerant design
converge to the correct state
QoS issues
automatic behaviours vs player-requested behaviours
prediction issues
anti-cheat designs
time synchronization

* Networking at scale
** Woo
scaling servers
logging
stats

* Weird networks
** Woo
don't allow bittorrent
NATs
CDNs
proxies

* Weird clients
** Woo
file permissions
OS edge cases (sleep mode)
floating point mismatches
client's aren't easy to ID

* Dependencies
** Woo
you don't want to write protocol libraries (bittorrent, protobuf)
these will have bugs in

* Error handling
** Woo
everything will go wrong
don't use asserts
computers are stupid
players: intelligent but non-technical?
analytics data & crash reports
math vs biology
recover gracefully (don't do the well of despair thing)
consider failure modes
disambiguate at low level, C&C at high level
retries rarely work

* Backwards compatibility
** Woo
protocols
APIs

* Operations
** Woo
people who run servers != people who write servers
don't make things brittle and ordering-sensitive
problems are often novel
humans need to be able to inspect and fix
hardware failures happen
release cadences
holidays, other titles and other release window problems

* Security
** Woo
if you're successful you're a target
clients should know as little as possible
servers should verify everything
at a certain scale, DDoS protection becomes business as usual
risk systems to score events
login & connection metering

* Performance
** Woo
login is the most expensive "operation"
consider API frequency/cost
the true thing to optimize for is power
consider performance "unit tests" to deal with scale
batching
caching (careful - it's hard)

* Other real-world issues
** Woo
virus scans & whitelisting
