#+TITLE:     Networking in the Real World
#+AUTHOR:    Ben Deane
#+EMAIL:     bdeane@blizzard.com
#+DATE:      24th February 2014
#+DESCRIPTION:
#+KEYWORDS: networking real world
#+LANGUAGE:  en
#+OPTIONS:   H:2 num:t toc:nil \n:nil @:t ::t |:t ^:t -:t f:nil *:t <:t
#+OPTIONS:   TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+SELECT_TAGS: export
#+EXCLUDE_TAGS: noexport

#+LaTeX_CLASS: beamer
#+STARTUP: beamer
#+BEAMER_THEME: Madrid
#+LaTeX_HEADER: \usepackage{helvet}
# +COLUMNS: %40ITEM %10BEAMER_env(Env) %9BEAMER_envargs(Env Args) %4BEAMER_col(Col) %10BEAMER_extra(Extra)

# To generate notes pages only:
# +LaTeX_CLASS_OPTIONS: [handout]
# +LaTeX_HEADER: \setbeameroption{show only notes}
# +LaTeX_HEADER: \usepackage{pgfpages}
# +LaTeX_HEADER: \pgfpagesuselayout{2 on 1}[letterpaper,portrait,border shrink=5mm]

# For normal presentation output:
#+LaTeX_CLASS_OPTIONS: [presentation, bigger]

* Introduction
** Who Am I?
:PROPERTIES:
:BEAMER_act: [<+->]
:END:
- Ben Deane
- Programmer at Blizzard on the Battle.net team
- Lifelong\mbox{*} network game programmer

*** Notes                                                          :B_note:
:PROPERTIES:
:BEAMER_env: note
:END:
At least for my working life...

** Who Am I?
:PROPERTIES:
:BEAMER_act: [<+(-1)->]
:END:
*** A block                                                  :B_column:BMCOL:
:PROPERTIES:
:BEAMER_col: 0.4
:BEAMER_env: column
:END:
#+attr_latex: width=\textwidth
[[./Populous-the-beginning.png]]
*** A block                                                :B_column:BMCOL:
:PROPERTIES:
:BEAMER_col: 0.4
:BEAMER_env: column
:END:
#+attr_latex: width=\textwidth
[[./starcraft-2-box.jpg]]

*** Notes                                                          :B_note:
:PROPERTIES:
:BEAMER_env: note
:END:
I've done RTS games. Populous 3 was first game I did that was properly
architected for Internet play.

** Who Am I?
:PROPERTIES:
:BEAMER_act: [<+(-1)->]
:END:
*** A block                                                  :B_column:BMCOL:
:PROPERTIES:
:BEAMER_col: 0.4
:BEAMER_env: column
:END:
#+attr_latex: width=\textwidth
[[./Warhammer40kfwbox.jpg]]
*** A block                                                :B_column:BMCOL:
:PROPERTIES:
:BEAMER_col: 0.4
:BEAMER_env: column
:END:
#+attr_latex: width=\textwidth
[[./Grabox.jpg]]

*** Notes                                                          :B_note:
:PROPERTIES:
:BEAMER_env: note
:END:
I've done FPS games. Firewarrior was Europe's first PS2 Internet-playable game.
It used a peer-to-peer network topology. Goldeneye: RA was a poorly received
game, but the network game had some fun features and some interesting
development stories I can tell you about.

** Who Am I?
:PROPERTIES:
:BEAMER_act: [<+(-1)->]
:END:
*** A block                                                :B_column:BMCOL:
:PROPERTIES:
:BEAMER_col: 0.4
:BEAMER_env: column
:END:
#+attr_latex: width=\textwidth
[[./SimThemeParkWorld.jpg]]
*** B block                                                :B_column:BMCOL:
:PROPERTIES:
:BEAMER_col: 0.4
:BEAMER_env: column
:END:
#+attr_latex: width=\textwidth
[[./Diablo_III_cover.png]]

*** Notes                                                          :B_note:
:PROPERTIES:
:BEAMER_env: note
:END:
I've done other types of games, and games where I worked on more network
infrastructure issues than actual gameplay networking.

For Theme Park World, I wrote the online park publishing & visiting code,
basically a glorified chatroom. For D3 my team did the whole Battle.net service.

* Basics

** Why Network Programming?
#+attr_latex: :align |c|r|r|r|
|------+-----------+-------------+--------------------|
| Year | CPU (MHz) | Memory (MB) | London-LA RTT (ms) |
|------+-----------+-------------+--------------------|
| 1995 |        90 |           8 |                200 |
| 2000 |       400 |          32 |                200 |
| 2005 |      1400 |         256 |                200 |
| 2010 |      2660 |        4096 |                200 |
| 2014 |      3330 |       16384 |                200 |
|------+-----------+-------------+--------------------|

- Networking programming stays interesting and challenging
- Hiding latency is the constant problem to solve
- Non-network programmers just discovered concurrency?

*** Notes                                                          :B_note:
:PROPERTIES:
:BEAMER_env: note
:END:
Network programming doesn't really get easier as machines get faster, unlike
most other programming disciplines.

Network programming is messy in ways that other programming disciplines aren't.
Errors are normal.

You think you have threading issues? That's nice. Welcome to my world. You're
not even concurrent across different machines - try spending 3 weeks poring over
hundreds of MB of logs for a problem that occurs 0.1% of the time in a
16-machine network game, then tell me how hard your threading bug is.

My aim for this lecture is to expand on what you've already learned in the
academic context, show you how it's applied in the industry, make you think
about messy real-world issues, and tell you some stories of where things have
gone right for me, and where things have gone wrong.

** TCP vs UDP
- Your most basic latency-affecting decision
- Game design and genre influences this

** TCP vs UDP
*** TCP                                                     :B_block:BMCOL:
:PROPERTIES:
:BEAMER_col: 0.4
:BEAMER_env: block
:END:
- Connection, stream-oriented
- 20-byte header
- Guaranteed in-order
- Nagling
- Socket per connection

*** UDP                                                     :B_block:BMCOL:
:PROPERTIES:
:BEAMER_col: 0.4
:BEAMER_env: block
:END:
- Connectionless, packet-oriented
- 8 byte header
- Best-effort
- Immediate send
- Single multiplexed socket

** TCP or UDP?
:PROPERTIES:
:BEAMER_act: [<+->]
:END:
1. Your data is usually ephemeral
1. It doesn't matter if one or two packets get dropped
1. UDP can do NAT traversal
1. UDP packet overhead is lower

*** Notes                                                          :B_note:
:PROPERTIES:
:BEAMER_env: note
:END:
You all know the difference between UDP and TCP

It's "received wisdom" in action games to use one's own partially-guaranteed
protocol over UDP, a few of reasons for this:

1. Your data is usually ephemeral and what's valid to send this frame will be
   invalidated next frame: you don't want to block waiting to send data.

2. For the same reason, it doesn't matter if one or two packets get dropped as
   long as the game state converges.

3. UDP has a big advantage in network topology which is that it is possible to
   do NAT traversal using STUN or some variant thereof.

4. UDP packet overhead is lower.

However, look again at point 1 and consider real life network behaviours. How
common is sustained or sporadic loss?

I remember a gd_algorithms group thread from some years ago in which it was
argued that packet loss is not normally nicely sustained at a low rate, but is
bursty. That is to say that a network dropout of a second or two would probably
stall your game just as badly on UDP as on TCP.

(However, UDP recovery is better because you don't waste time resending the
packets that are out of date.)

This was/is probably true in the US and other countries with mature internet
infrastructure.

However, our experience of Chinese networks has shown that it is not uncommon to
have sustained high packet loss (~20%). Even with relatively high speed, high
bandwidth connections.

Roll-your-own guaranteed on UDP can work at the object level, ACK packets you've
received, implicitly NAK ones you've skipped, re-dirty the data. You can also
mix in verbatim packet resend for events that warrant it (eg not movement data,
but object transitions).

latency issues?
asynchronous design
fault-tolerant design
converge to the correct state
QoS issues
automatic behaviours vs player-requested behaviours
prediction issues
anti-cheat designs
time synchronization

** Synchronizing Time
:PROPERTIES:
:BEAMER_act: [<+->]
:END:
- Games typically use an NTP-like algorithm
- Part of connection establishment
- Sync to epoch (eg. start of level)

** Network topologies

Client-server vs Peer-to-peer
Peer-to-peer has half the latency.
Peer-to-peer is more complex code.
Peer-to-peer is more brittle because more connections = more opportunity for drops.
8-player game: 7 connections CS, 28 P2P.
Peer-to-peer makes some things easier (eg. logic for host migration).
Peer-to-peer is harder to establish the mesh especially in the presence of NAT.

** Lobby setup vs drop-in any time?

What type of game is it? eg. Round-based FPS vs RTS.
Lobby discovery.

* FPS issues


* RTS issues
** Input passing
** E-sports and Fairness

* MMO issues


* Cheating


* Networking at scale
** Woo
scaling servers
logging
stats

* Weird networks
** Woo
don't allow bittorrent
NATs
CDNs
proxies

* Weird clients
** Woo
file permissions
OS edge cases (sleep mode)
floating point mismatches
client's aren't easy to ID

* Dependencies
** Woo
you don't want to write protocol libraries (bittorrent, protobuf)
these will have bugs in

* Error handling
** Woo
everything will go wrong
don't use asserts
computers are stupid
players: intelligent but non-technical?
analytics data & crash reports
math vs biology
recover gracefully (don't do the well of despair thing)
consider failure modes
disambiguate at low level, C&C at high level
retries rarely work

* Backwards compatibility
** Woo
protocols
APIs

* Operations
** Woo
people who run servers != people who write servers
don't make things brittle and ordering-sensitive
problems are often novel
humans need to be able to inspect and fix
hardware failures happen
release cadences
holidays, other titles and other release window problems

* Security
** Woo
if you're successful you're a target
clients should know as little as possible
servers should verify everything
at a certain scale, DDoS protection becomes business as usual
risk systems to score events
login & connection metering

* Performance
** Woo
login is the most expensive "operation"
consider API frequency/cost
the true thing to optimize for is power
consider performance "unit tests" to deal with scale
batching
caching (careful - it's hard)

* Other real-world issues
** Woo
virus scans & whitelisting
